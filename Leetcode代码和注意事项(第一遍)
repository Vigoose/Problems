Leetcode代码和注意事项(第一遍)

Leetcode : 215 Kth Largest Element in an Array

不大会，用非递归的方法，双指针，Quick Selection来进行从大到小的排序。


Leetcode : 218. The Skyline Problem  ****

Sweep Line，起始点取最高高度，结束点取第二高度


Leetcode 224 Basic Calculator ***

一定要会，用Stack方法存括号


Leetcode : 236 Lowest Common Ancestor of a Binary Tree

Reverse LinkedList 和 删除节点需要熟悉


Leetcode : 239 Sliding Window Maximum  ***

Deque的数据结构需要了解一下，如有需要要再看一遍视频


Leetcode 253 Meeting Rooms II ****

Sweep line and PriorityQueue


Leetcode Alien Order ***

拓扑排序，首先构建一个图，用HashMap来存Key和她后面的值，再用BST Queue的方法返回字典结果，比较重要，需要再看一遍视频


Inorder Successor in BST

标准答案跑出来的好像不大一样


 Leetcode - 295  Find Median from Data Stream  ***

 用两个PriorityQueue 不停的往里面加值，保证两个相等或者只差一个数，最后求中位数
 

Leetcode - 300  Longest Increasing Subsequence  **** 

解法很难想到
首先定义一个存放所有最大数组的tail数组，开始放入Nums, define two variable i and j, i equals the starting index of the array and j equals to the end index of the array, when the num pops in, it will firstly check if this array has the same starting index or end index, if not that means this array has number within it, then it will check the median index number within this array comparing to the new pops in number, if it was less than pops number we put the starting index i equals to the mid + 1 because this number should be place after the middle number within array, if it was less than the number it will have the ending index j equals to the mid point, then the j moving towards i, if the j still not equals I, it will keep the same process going on the eventually it will find its position i within the array tail, 


    class Solution {
       public static int lengthOfLIS(int[] nums){
                int[] tail = new int[nums.length];
                /**/
                int res = 0;
                for (int num : nums){
                  int i = 0, j = res;
                  while (i != j){
                    int mid = (i + j) / 2;
                    if (tail[mid] < num){
                      i = mid + 1;
                    }else{
                      j = mid;
                  }
                }            
                tail[i] = num;
                if (i == res) ++res;
                }
                return res;
              }
    }


Immutable2DSumRangeQuery

利用DP的思想，新建一个另外的数组存（增加第0行和第0列方便计算）储所有从0，0到现在所在点的位置总和，Current matrix i j value should be:
T[i , j] = T[i -1, j] + T[i, j - 1] - T[ i - 1, j - 1] + current Matrix[i][j].
The final res = T[row2, col2] - T[row2, col1 -1] - T[row1 - 1,col2] + T[row1 - 1, col1 - 1]

    public class Immutable2DSumRangeQuery {
        private int[][] T;
            public Immutable2DSumRangeQuery(int[][] matrix) {
                int row = 0, col = 0;
                if (matrix.length != 0){
                    row = matrix.length;
                    col = matrix[0].length;
                }
            T = new int[row + 1][col + 1];
            for (int i = 0; i < t.length; i++)
            
            for (int i = 1; i <= row; i++){
                for (int j = 1; j <= col; j++){
                    T[i, j] = T[i - 1, j] + T[i, j - 1] + matrix[i-1][j-1] - T[i-1. j-1]; 
                }
            }
            }
            public int sumQuery(int row1, int col1, int row2, int col2) {
              row1++;
              col1++;
              row2++;
              col2++;
              return T[row2, col2] - T[row2, col1 - 1] - T[row1 - 1, col2] + T[row1 - 1, col1 -1];
            }
    }





Leetcode - 307, 308. Range Sum Query - Mutable 讲解 ***

这个数据结构非常重要：Binary Index Tree, 利用


Leetcode - 315. Count of Smaller Numbers After Self ***

非常巧妙的方法
一个list中插入的index刚好是后面比它小数字的个数。
首先创建一个List用来存入之前列表里从后往前的最后一个值，
最后一个数，初始的肯定是0，因为后面没有比它更大的数
倒数第二个数，如果是比前一个数大的话就插入到后面，index = 1， 反之Index为0.
下面以此类推。
把所有插入再List里的Index


    class Solution {
          public List countSmaller(int[] nums) {
                Integer[] res = new Integer[nums.length];
                List list = new ArrayList<>();
                for (int i = nums.length - 1; i >= 0; i--){
                    int index = findIndex(list, nums[i]);
                    res[i] = index;
                    list.add(index, nums[i]);
                }
                return Arrays.asList(res);
          }
    
    private int findIndex(List<Integer> list, int num){
        if (list.size() == 0) return 0;
        int start = 0, end = list.size() - 1;
        if ( list.get(end) <  num) return end + 1;
        if (list.get(start) >= num) return start;
        while (start + 1 < end){
            int mid = (end - start) / 2 + start;
            if (list.get(mid) < num){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
        if (list.get(start) >= num) return start;
        return end;
    }
    }


Leetcode 322 Coin Change 

经典的背包问题
这是一道经典的使用DP来做的一道题：
当我们知道这一题要用DP来做以后，
我们首先要开始想转移方程怎么写：
这一题的转移方程是：
T[i] = min (min, T[i - coins[j]] + 1); 

    class Solution {
    public int coinChange(int[] coins, int amount) {
    if (amount == 0) return 0;
    if (coins == null || coins.length == 0) return -1;
        int[] dp = new int[amount + 1];
        for (int i = 1; i <= amount; i++){
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < coins.length; j++){
                if (i >= coins[j] && dp[i - coins[j]] != -1){
                    min = Math.min(min, dp[i - coins[j]] + 1);
                }
            }
            dp[i] = min == Integer.MAX_VALUE? -1 : min;
        }
        return dp[amount];
    }
    }



Leetcode - 324. Wiggle Sort II ****

一种暴力解法：
找中位数，找到以后将小于中位数的从左往右遍历，大于中位数的从右往左遍历。
如果是小于中位数的，就从右往左找，找偶数Index，并插入到Index的位置。碰到中位数最后放，放到第一位0位，然后开始从右往左遍历，如果是大于中位数的，就从左往右找，找奇数

1，2，3，4，5，6
0，1，2，3，4，5

med: 3
2,3,4,5,1,6
0,1,2,3,4,5

3,4,2,5,1,6
0,1,2,3,4,5

3,6,4,2,5,1
0,1,2,3,4,5

3,6,4,2,5,1
0,1,2,3,4,5


    class Solution {
        public void wiggleSort(int[] nums) {
            Arrays.sort(nums);
            int n = nums.length;
            int mid = (n - 1) /2;
            int[] temp = new int[n];
            int index = 0;
            for (int i = 0; i <= mid; i++){
                temp[index] = nums[mid - i];
                if (index + 1 < n){
                    temp[index + 1] = nums[n - 1 - i];
                }
                index += 2;
            }
            System.arraycopy(temp, 0, nums,0,n);
        }
    }



longestIncreasingPath

矩阵的DFS做法：

- 判断边界条件，length = 0的情况
- 求出矩阵的长度和宽度 m n
- 将要求的值设为res, another matrix etc…
- 两个For循环，i , j 从左向右从上到下查找
- 要求的值 = dfs方程
    int max = dfs(matrix, Integer.MIN_VALUE, m, n, i, j, cache);


- 接下来写dfs方程
    private int dfs (int[][] matrix, int min, int m, int n, int i, int j, int[][] cache)
  - 由于是递归方程，在DFS方程里首先需要判断边界条件，在边界条件里首先判断这个指针在上下走的时候是不是越界，所以要对四个方向，>0 <0 <m <n
    if (i >= m || j >= n || i < 0 || j < 0|| matrix[i][j] <= min) return 0;

如果越界了就return 0;
如果判断满足了条件就将min或者当前的Matrix[i][j]存下来，接下来递归调用四边的递归方程：

- 最后Return：
    int a = dfs(matrix, min, m, n, i + 1, j, cache) + 1;
        int b = dfs(matrix, min, m, n, i - 1, j, cache) + 1;
        int c = dfs(matrix, min, m, n, i, j + 1, cache) + 1;
        int d = dfs(matrix, min, m, n, i, j - 1, cache) + 1;
        int max = Math.max(a,Math.max(b,Math.max(c,d)));
        cache[i][j] = max;
        return max;

完整代码例子如下：

    class Solution {
          public int longestIncreasingPath(int[][] matrix) {
          if (matrix == null || matrix.length == 0) return 0;
          int m = matrix.length, n = matrix[0].length;
          int res = 0;
          int[][] cache = new int[m][n];
          for (int i = 0; i < m; i++){
                for (int j = 0; j < n; j++){
                      int max = dfs(matrix, Integer.MIN_VALUE, m, n, i, j, cache);
                      res = Math.max(res, max);
                }
          }
          return res;
        }
        
    private int dfs (int[][] matrix, int min, int m, int n, int i, int j, int[][] cache){
        if (i >= m || j >= n || i < 0 || j < 0|| matrix[i][j] <= min) return 0;
        if (cache[i][j] != 0) return cache[i][j];
        min = matrix[i][j];
        int a = dfs(matrix, min, m, n, i + 1, j, cache) + 1;
        int b = dfs(matrix, min, m, n, i - 1, j, cache) + 1;
        int c = dfs(matrix, min, m, n, i, j + 1, cache) + 1;
        int d = dfs(matrix, min, m, n, i, j - 1, cache) + 1;
        int max = Math.max(a,Math.max(b,Math.max(c,d)));
        cache[i][j] = max;
        return max;
        }
    }
| 运算符的先后顺序： |                                               |      |
| --------- | --------------------------------------------- | ---- |
| 优先级       | 运算符                                           | 结合性  |
| 1         | () [] .                                       | 从左到右 |
| 2         | ! +(正)  -(负) ~ ++ --                          | 从右向左 |
| 3         | * / %                                         | 从左到右 |
| 4         | +(加) -(减)                                     | 从左到右 |
| 5         | << >> >>>                                     | 从左到右 |
| 6         | < <= > >= instanceof                          | 从左到右 |
| 7         | ==   !=                                       | 从左到右 |
| 8         | &(按位与)                                        | 从左到右 |
| 9         | ^                                             | 从左到右 |
| 10        | |                                             | 从左到右 |
| 11        | &&                                            | 从左到右 |
| 12        | ||                                            | 从左到右 |
| 13        | ?:                                            | 从右向左 |
| 14        | = += -= *= /= %= &= |= ^=  ~=  <<= >>=   >>>= | 从右向左 |

Leetcode - 340. Longest Substring with At Most K Distinct Characters

Sliding Window Problem
这种题目的统一做法是首先定义一个存现有window 的数组，需要有两个前后指针
第一个指针从前往后遍历，第二个指针写在第一个指针的For循环里，在满足了window的条件以后第二个指针开始往后移动。


    public class lengthOfLongestSubstringKDistinctClass {
        public static int lengthOfLongestSubstringKDistinct(String s, int k) {
            int[] count = new int[256];
            int res = 0, j = 0, num = 0;
            for (int i = 0; i < s.length(); i++){
                if(count[s.charAt(i)]++ == 0) num++;
                if (num > k){
                    while (--count[s.charAt(j++)] > 0);
                    num--;
                }
                res = Math.max(res, i - j + 1);
            }
            return res;
        }
    }


Sliding Window滑动窗口问题

思路
滑动窗口问题一般题目会很典型，要求我们一直维护一个size为k的window，然后do some operation/calculate something within that window。基本思路就是每次不管三七二十一先把当前新的元素加进来，然后如果有需要(比如有元素过期了）移除出来，这时我们可以确保现在maintain的是一个valid window。真正的logic happens here。
步骤

- 一定先加进元素，这里add operation是每个元素都要加的
- 再移除元素，这里移除是需要满足condition的，只有有元素过期的情况下，才去remove
- 进行calculation，这里进行计算也是需要满足condition的，至于形成一个valid的window之后才可以开始计算，如果窗口还不够size，此时不应该进行计算。

题型
因为我们要maintain一个size为k的window,除了上述的算法层面的操作，我们还需要考虑使用什么容器去hold那些元素。这里常见的容器有:

- Queue (First in First out behavior)
- Deque (双端都可以操作）
- Stack (一般是单调栈的应用）
- Heap（求max/min, first k max/mins, median)

题目
Heap

- Leetcode 295. Find Median from Data Stream
- Find Median from Data Stream Where Integers Are 16-bit
- Leetcode 360. Sliding Window Median

Deque

- Leetcode 239. Sliding Window Maximum
- Sliding Window Maximum for Data Streaming (Facebook店面，这道题和前一题有一个区别就是这里是stream而不是array，所以我们没有index，但是我们可以keep一个count var来作为index，其他一样，还是用deque来做。)

Queue

- LintCode 558. Sliding Window Matrix Maximum(这道题看似是求max,但是和sliding window max不同的是那道题是k个里面求一个最大的，这里是k个数求和求最大，所以其实是sliding window mean的变形，我们只需要queue，根本不需要deque）
- Sliding Window Mean
- Leetcode 362. Design Hit Counter



341. Flatten Nested List Iterator 

一个嵌套的Integer，嵌套的类型可能有单一的一个Integer，也有可能有一个List<NestedInteger>
通过实现这个类的方法来添加以及判断值。
用Stack的方法来从后往前添加。

    //**
    // This is the interface that allows for creating nested lists.
    // You should not implement it, or speculate about its implementation
    //public interface NestedInteger {
    *
    // @return true if this NestedInteger holds a single integer, rather than a nested list.
    //public boolean isInteger();
    *
    // @return the single integer that this NestedInteger holds, if it holds a single integer
    // Return null if this NestedInteger holds a nested list
    public Integer getInteger();
    *
    // @return the nested list that this NestedInteger holds, if it holds a nested list
    // Return null if this NestedInteger holds a single integer
    public List getList();
    }
    */
    public class NestedIterator implements Iterator {
          Stack stack;
          public NestedIterator(List nestedList) {
                  stack = new Stack<>();
                  for(int i = nestedList.size() - 1; i >=0; i--){
                        stack.push(nestedList.get(i));
                  }
          }
    @Override
    public Integer next() {
        return stack.pop().getInteger();
    }
    @Override
    public boolean hasNext() {
        while(!stack.isEmpty()){
            NestedInteger cur = stack.peek();
            if (cur.isInteger()){
                return true;
            }
            stack.pop();
            for (int i = cur.getList().size() - 1; i >= 0; i--){
                stack.push(cur.getList().get(i));
            }
        }
        return false;
        }
    }
    /**
    Your NestedIterator object will be instantiated and called as such:
    NestedIterator i = new NestedIterator(nestedList);
    while (i.hasNext()) v[f()] = i.next();
    **/


Leetcode 347  Top K Frequent Elements *****

非常重要的一道题，最好掌握多种方法，很有可能是某一类大题目的某个关键步骤：

PriorityQueue
掌握的知识点：
用HashMap来存所有数字出现的次数，Key 为Num，value为出现的次数

    HashMap<Integer, Integer> map = new HashMap<>();
            for (int num : nums){
                map.put(num, map.getOrDefault(num, 0) + 1);
            }

如何重写Queue的比较方法，让其变成MaxHeap not MiniHeap.

    PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
        new PriorityQueue<>((a, b) -> (b.getValue() - a. getValue()));

掌握Map.Entry简易用法
遍历：

    for (Map.Entry<Integer, Integer> entry: map.entrySet())

用entry.getValue方法来得到具体某一项的value。

完整代码如下所示：

    class Solution {
        public List<Integer> topKFrequent(int[] nums, int k) {
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int num : nums){
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
            PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
          new PriorityQueue<>((a, b) -> (b.getValue() - a. getValue()));
            for (Map.Entry<Integer, Integer> entry: map.entrySet()){
                maxHeap.add(entry);
            }
            List<Integer> res = new ArrayList<>();
            while (res.size() < k){
                Map.Entry<Integer, Integer> entry = maxHeap.poll();
                res.add(entry.getKey());
            }
            return res;
        }
    }

TreeMap做法：
利用红黑树的数据结构来存储结构
主要树的存储结构如下：TreeMap<Integer, List<Integer>>
[1,1,1,2,2,3,3,4]
key存储为频率，List Integer里存储的是所有出现频率为key的nums. 
3, | 1
2, | 2,3
1,  | 4

由于TreeMap里用红黑树实现，所以可以按照key的自然顺序按照升序排列，每次用pollLastEntry方法就可以将最大Key的值一个一个求出来。

    TreeMap<Integer, List<Integer>> treeMap = new TreeMap<>();
          for (int num : map.keySet()){
                  int freq = map.get(num);
                  if (treeMap.containsKey(freq)){
                      treeMap.get(freq).add(num);
                  }else{
                      treeMap.put(freq, new LinkedList<>());
                      treeMap.get(freq).add(num);
                  }
          }
          List<Integer> res = new ArrayList<>();
          while (res.size() < k){
              Map.Entry<Integer, List<Integer>> entry = treeMap.pollLastEntry();
              res.addAll(entry.getValue());
          }

完整代码如下所示：

    class Solution {
          public List topKFrequent(int[] nums, int k) {
                  HashMap map = new HashMap<>();
                  for (int num : nums){
                      map.put(num, map.getOrDefault(num, 0) + 1);
                  }
                  TreeMap<Integer, List<Integer>> treeMap = new TreeMap<>();
                  for (int num : map.keySet()){
                          int freq = map.get(num);
                          if (treeMap.containsKey(freq)){
                              treeMap.get(freq).add(num);
                          }else{
                              treeMap.put(freq, new LinkedList<>());
                              treeMap.get(freq).add(num);
                          }
                  }
                  List<Integer> res = new ArrayList<>();
                  while (res.size() < k){
                      Map.Entry<Integer, List<Integer>> entry = treeMap.pollLastEntry();
                      res.addAll(entry.getValue());
                  }
                  return res;
                  }
    }


第三种方法是Bucket Sort，这是一种无限浪费空间的算法，需要再开辟一个和之前传入值一样大+1的空间，但是效率非常高，很多情况下比快速排序还快。

原理就是开辟一个和原输入一样大的桶：
[1,1,1,2,2,3,3,4]
  [4][2,3][1]
[] [] [] [] [] [] [] [] [] [] [] []
0  1 2  3 4 5 6  7  8 9 1011
就本题而言，用BucketSort桶的编号来代表出现的频率，每一个桶里存一个List，里面是所有出现这个频率的数字。

    List[] bucket = new List[nums.length + 1];
      for (int num: map.keySet()){
          int freq = map.get(num);
          if (bucket[freq] == null){
                  bucket[freq] = new LinkedList<>();
          }
          bucket[freq].add(num);
      }

最后在遍历的时候从后往前遍历（因为是要找TOP K），碰到

    for (int i = bucket.length - 1; i >= 0 && res.size() < k; i--){
            if (bucket[i] != null)
                res.addAll(bucket[i]);
        }

全部代码如下：TopKFrequentBucketSort

    class Solution {
          public List topKFrequent(int[] nums, int k) {
                HashMap map = new HashMap<>();
                for (int num : nums){
                   map.put(num, map.getOrDefault(num, 0) + 1);
                }
                List[] bucket = new List[nums.length + 1];
                for (int num: map.keySet()){
                    int freq = map.get(num);
                    if (bucket[freq] == null){
                            bucket[freq] = new LinkedList<>();
                    }
                    bucket[freq].add(num);
                }
        List<Integer> res = new ArrayList<>();
    
        for (int i = bucket.length - 1; i >= 0 && res.size() < k; i--){
            if (bucket[i] != null)
                res.addAll(bucket[i]);
        }
        return res;
    }
    }


Leetcode - 350. Intersection of Two Arrays II 

主要有两种方法来解：
用HashMap存（数字，出现频率）来解决
排序以后用双指针不停的向后移动比较。


    public int[] intersect1(int[] nums1, int[] nums2) {
            HashMap<Integer, Integer> map = new HashMap<>();
            List<Integer> ret = new ArrayList<>();
            for (int i = 0; i < nums1.length; i++){
                if (map.containsKey(nums1[i])){
                    map.put(nums1[i], map.get(nums1[i]) + 1);
                }else{
                    map.put(nums1[i], 1);}
            }
            for  (int i = 0; i < nums2.length; i++){
                if (map.containsKey(nums2[i])){
                    if (map.get(nums2[i]) > 0)
                        ret.add(nums2[i]);
                    map.put(nums2[i], map.get(nums2[i]) - 1);
                }
            }
            int[] res = new int[ret.size()];
            int k = 0;
            for (Integer num: ret){
                res[k++] = num;
            }
            return res;
        }
    //第二种方法：
        public int[] intersect1(int[] nums1, int[] nums2) {
            Arrays.sort(nums1);
            Arrays.sort(nums2);
            List<Integer> ret = new ArrayList<>();
            int i = 0, j = 0;
            while (i < nums1.length && j < nums2.length){
                if (nums1[i] < nums2[j]){
                    i++;
                }else if (nums1[i] > nums2[j]){
                    j++;
                }else {
                    ret.add(nums1[i]);
                    i++;
                    j++;
                }
            }
            int[] res = new int[ret.size()];
            int k = 0;
            for (Integer num: ret){
                res[k++] = num;
            }
            return res;
        }
    }


371. Sum of Two Integers 

主要进行位运算，需要补充位运算知识。



378. Kth Smallest Element in a Sorted Matrix 

介绍了两种方法，一种用PriorityQueue，一种用BinarySearch
先介绍用BinarySearch的方法：

不同于一般的二分查找一点的就是这里计算出来的Mid值是真正头尾相加/2的值，而不是中间的Index，所以无法保证mid一定在中间，所以需要Count函数确定多少个数在Mid左边，多少个数在Mid右边。
他的效率也要小于一般的二分查找。

通过不停地查找找到left right相差一位的时候，接下来来判断：

    if (count(matrix, right) <= k - 1) return right;
            return left;

count函数功能：寻找在给定数字的情况下，返回Matrix比这个数字小的数的个数

    matrix = [
       [ 1,  5,  9],
       [10, 12, 13],
       [12, 13, 21]
    ], k = 8;

由于矩阵本身是排好序的所以，采取一种巧妙的办法：
第一步：直接让最左下角的数字和数字Target进行比较，如果比Target要大，那么这一行所有后面的数都会比他大，所以移到上一行，如果发现比Target要小，那么这一行上面的所有数字也都比Target要小，res = res + i + 1, 先将这一列所有的数字加进去，再向右走，直到加进去所有的元素。

    int n = matrix.length;
            int res = 0;
            int i = n - 1, j = 0;
            while (i >= 0 && j < n){
                if (matrix[i][j] < target){
                    res += i + 1;
                    j++;
                }else{
                    i--;
                }
            }

整体代码如下：

        public int kthSmallest(int[][] matrix, int k) {
            int n = matrix.length;
            int left = matrix[0][0];
            int right = matrix[n - 1][n - 1];
            while (left + 1 < right){
                int mid = (right - left) / 2 + left;
                int num = count(matrix, mid);
                if (num < k){
                    left = mid;
                }else{
                    right = mid;
                }
            }
            if (count(matrix, right) <= k - 1) return right;
            return left;
        }
        /**
        matrix = [
       [ 1,  5,  9],
       [10, 12, 13],
       [12, 13, 21]
    ],
    k = 11
        */
        private int count(int[][] matrix, int target){
            int n = matrix.length;
            int res = 0;
            int i = n - 1, j = 0;
            while (i >= 0 && j < n){
                if (matrix[i][j] < target){
                    res += i + 1;
                    j++;
                }else{
                    i--;
                }
            }
            return res;
        }


Leetcode 380  Insert Delete GetRandom O(1)

为什么用HashMap这个数据结构，因为他在插入，检索和删除这些操作里的效率比较高。
用数的值作为Index，在List中的Index作为Value
每插入和删除一次需要在List和HashMap里同时更新数据。

    class RandomizedSet {
    HashMap<Integer, Integer> map;
    ArrayList<Integer> list;
    Random rmd;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        map = new HashMap<>();
        list= new ArrayList<>();
        rmd = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (map.containsKey(val)) return false;
        map.put(val, list.size());
        list.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if (!map.containsKey(val))  return false;
        int index = map.remove(val);
        int lastVal = list.remove(list.size() - 1);
        if (index != list.size() - 1){
            list.add(index, lastVal);
            map.put(lastVal, index);
        }
        return true;
    
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return list.get(rmd.nextInt(list.size()));
    }
    }
    /**
    Your RandomizedSet object will be instantiated and called as such:
    RandomizedSet obj = new RandomizedSet();
    boolean param_1 = obj.insert(val);
    boolean param_2 = obj.remove(val);
    int param_3 = obj.getRandom();
    */



Leetcode 382  Linked List Random Node

此题的重点是掌握蓄水池算法，从一个给定范围的数字中间随机挑选K个数，每个数字被挑选的概率一样

    /**
    Definition for singly-linked list.
    public class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
    }
    */
    class Solution {
    /** @param head The linked list's head.
    Note that the head is guaranteed to be not null, so it contains at least one node. */
        private Random rmd;
        private ListNode head;
        public Solution(ListNode head) {
            this.head = head;
            rmd = new Random();
        }
    /** Returns a random node's value. */
    public int getRandom() {
          ListNode temp = head;
          int res = temp.val;
          int i = 1;
          while (temp.next != null){
              temp = temp.next;
              if (rmd.nextInt(++i) == 0){
                  res = temp.val;
              }
          }
          return res;
          }
    }
    /**
    Your Solution object will be instantiated and called as such:
    Solution obj = new Solution(head);
    int param_1 = obj.getRandom();
    */


Leetcode 384  Shuffle an Array

另外一道Random题，也是用蓄水池算法的原理，将随机找到的数和现在指针所在的数做交换。


    class Solution {
    private int[] nums;
    private Random rmd;
    public Solution(int[] nums) {
        this.nums = nums;
        rmd = new Random();
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return nums;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        if (nums == null) return null;
        int[] clone = nums.clone();
        for (int i = 1; i < nums.length; i++){
            int temp = rmd.nextInt(i + 1);
            swap(clone, i, temp);
        }
        return clone;
    }
    private void swap(int[] clone, int i, int j){
        int temp = clone[i];
        clone[i] = clone[j];
        clone[j] = temp;
    }
    }
    /**
    Your Solution object will be instantiated and called as such:
    Solution obj = new Solution(nums);
    int[] param_1 = obj.reset();
    int[] param_2 = obj.shuffle();
    */


Leetcode 387  First Unique Character in a String

Easy题，用count数组存一下所有的字母出现的次序：

    class Solution {
    public int firstUniqChar(String s) {
        int count[] = new int[26];
        for (int i = 0; i < s.length(); i++){
            count[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s.length(); i++){
            if (count[s.charAt(i)- 'a'] == 1)
                return i;
            }
            return -1;
        }
    }


395. Longest Substring with At Least K Repeating Characters 


Leetcode - 398  Random Pick Index
    class Solution {
    int[] nums;
    Random rmd;
    public Solution(int[] nums) {
        this.nums = nums;
        rmd = new Random();
    }
    
    public int pick(int target) {
        int res = -1;
        int count = 0;
        for (int i = 0; i < nums.length; i++){
            if (nums[i] != target) continue;
            if (rmd.nextInt(++count) == 0){
                res = i;
            } 
        }
        return res;
    }
    }
    /**
    Your Solution object will be instantiated and called as such:
    Solution obj = new Solution(nums);
    int param_1 = obj.pick(target);
    */


Leetcode 412. Fizz Buzz 

Easy题，

    class Solution {
    public List fizzBuzz(int n) {
          List res = new ArrayList<>();
          for (int i = 1; i <=n; i++){
              if (i % 3 == 0 && i % 5 == 0){
                  res.add("FizzBuzz");
              } else if (i % 3 == 0){
                  res.add("Fizz");
              }else if (i % 5 == 0){
                  res.add("Buzz");
              }else {
                  res.add(i + "");
               }
          }
              return res;
        }
    }

Leetcode 412 4SumII
将两两数组的和转化为求2SUM的问题AC代码如下：

    class Solution {
        public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
            if (A == null || A.length == 0) {
                return 0;
            }
            HashMap mapAB = new HashMap<>();
            int n = A.length;
            int res = 0;
            for (int a : A){
                for (int b : B){
                    mapAB.put(a+b, mapAB.getOrDefault(a+b, 0) + 1);
            }
            }
            for (int c : C){
                for(int d : D){
                    int part2 = - (c + d);
                    res += mapAB.getOrDefault(part2, 0); 
            }
            }
            return res;
        }
    }


611. Valid Triangle Number 

三指针的原理还不是特别明白：


    class Solution {
        public static int triangleNumber(int[] A) {
        Arrays.sort(A);
        int count = 0, n = A.length;
        for (int i = n-1; i >= 2; i--) {
            int l = 0, r = i-1;
            while (l < r) {
                if (A[l] + A[r] > A[i]) {
                    count += r-l;
                    r--;
                }
                else l++;
            }
        }
        return count;
    }
    }
